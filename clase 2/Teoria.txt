"""
    Git && GitHub
                  """


Git es un versionador de código, el cual sirve como sistema de control.
  -> Registra los cambios del proyecto en la linea del tiempo.
  -> Permite:
      1. Revertir a un estado anterior
      2. Comparar cambios
      3. Determinar quién realizo un determinado cambio

  
  Areas en Git 


  --------------------         --------------------          ----------------------------
   Working Directory               Staging Area                .git Directory (repository)
          |                             |                                   |
          | -------------------------->>|                                   |
          |      git add .              |                                   |
          |                             |                                   |
          |<<---------------------------|                                   |
          |         git reset .         |                                   |
          |                             |                                   |
          | -------------------------->>|                                   |
          |      git add .              |                                   |
          |                             | -------------------------------->>|
          |                             |  git commit -m 'First commit'     |


Recordemos:

  instalación: https://git-scm.com/book/es/v2/Inicio---Sobre-el-Control-de-Versiones-Instalaci%C3%B3n-de-Git

  instalador: http://git-scm.com/download/win

Una vez instalado verificamos la versión:   git --version

Configuremos las credenciales: 

    git config --global user.name "Mi usuario de GitHub"
    git config --global user.email "email@gmail.com"

Corroboremos las credenciales:

  git config --list


Creamos una carpeta con $ mkdir mi_repositorio_en_git

Ahora habramos el proyecto en vscode

Una vez hechas las configuraciones podemos iniciar nuestro repositorio local de Git:  $ git init

Verificamos el estado de nuestro repositorio: $ git status

Creamos un archivo index.html y dentro colocamos la estructura de la página. 

Podemos servir la página con python 
    $ py -m http.server 9000 

Ahora podemos acceder a ella por el navegador o desde la terminal 
    $ curl -v [sitio al que queremos acceder] 


Verificamos el estado nuevamente: $ git status
  Untracked files: .....

  Nos advierte que tenemos archivos sin seguimiento

Por defecto git crea la rama master. Demosle seguimiento a los archivos modificados
y pasemoslos al staging area.

    % git add .

    $ git status    // sin advertencias esta vez

En este punto podríamos revertir esos cambios y volver los archivos al working Directory

  $ git reset . 

ó gernerar un commit 

  $ git commit -m 'Mi first commit'

------------------------------------------------------------------------------------------

                          Trabajando con las ramas en git 



                              _ _ _ _ _  beta _ _ _ _ 
                             /                        \  merge
          _ _ _ _ _ _ _ _ _ /_ _ _ _ _ _ _ master _ _ _\_ _ _ _ _ _ _ 


  Como anticipabamos git crea la rama master, pero nosotros podríamos crear una segunda rama 
para continuar con una parte de nuestro proyecto. Esto dejaía sin afectar la rama mastrer. 
  De esta manera podríamos trabajar en la rama master solo con los archivos que estan listos 
para ser subidos a GitHub, ese es nuestro código madre. 

  Para ver las ramas actuales basta con escribir: 
    $ git branch 

    * master

  Probemos crear una nueva rama:
    $ git branch beta 

      beta
    * master

  Nos ha creado una copia exacta de la rama master, es este punto nos dice que continuamos en master.
  Podemos borrarla con 
    $ git branch -d beta 
  
  ó podemos switchear a la nueva rama:

      $ git checkout beta 
      Switched to branch 'beta'

  Realicemos un cambio en nuestro archivo y verifiquemos el status. 
  Ahora comitiemos y volvamos a la rama master. 

  Por ultimos vemos que no tenemos el cambio realizado en beta vamos a traer esos cambios.
      $ git merge beta 

      esto nos informa la cantidad de lineas modificadas en el archivo. 

  Aca ya podemos ver el log de commit con git log.

  Podriamos volver en la linea del tiempo 

      $ git reset --hard [hash commit]

  
  Bien ahora vamos a salir de la carpeta y vamos a clonar el repositorio del curso. 

  $ git clone https://github.com/pmNiko/programacion-en-python.git

  Se nos descarga la carpeta del repo. 

  Bien ingresamos al proyecto inicializamos git y agregamos la rama remota para poder actualizar cambios. 

    $ git remote -v 
    $ git remote add origin https://github.com/pmNiko/programacion-en-python.git
    $ git remote -v 

  Para verificar cambios en el repositorio remoto 

    $ git fetch 

  Luego traemos los cambios: 

    $ git pull 

  creamos una rama con nuestro feature y nos movemos a ella para poder seguir trabajando. 

  
